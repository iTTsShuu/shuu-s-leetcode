/*
 * @lc app=leetcode.cn id=38 lang=java
 *
 * [38] 外观数列
 */

// @lc code=start
class Solution38 {
    String getRLE(String s) {
        StringBuilder sb = new StringBuilder();
        int cnt = 1; // 计数
        for (int i = 0; i < s.length(); i++) {
            char tmp = s.charAt(i);
            while (i + 1 < s.length() && s.charAt(i + 1) == tmp) {
                cnt++;
                i++;
            }
            sb.append(cnt);
            sb.append(tmp);
            if (i < s.length()) {
                tmp = s.charAt(i);
                cnt = 1; // 重置计数器
            }
        }
        return sb.toString();

    }

    public String countAndSay(int n) {
        if (n == 1) {
            return "1";
        }
        return getRLE(countAndSay(n - 1));
    }

    //// LCS 0.题目测试
    public int largestArea(String[] grid) {
        int m = grid.length;
        int n = grid[0].length();
        char[][] chgrid = new char[m][n];
        for (int i = 0; i < m; i++) {
            chgrid[i] = grid[i].toCharArray();
        }
        int maxS = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                char cur = chgrid[i][j];
                if (cur - '0' >= 0 && cur - '0' <= 5) {
                    int curAns = dfs(chgrid, i, j, cur);
                    maxS = Math.max(curAns, maxS);
                }
            }
        }
        return maxS;
    }

    int dfs(char[][] grid, int x, int y, char curCh) {
        if (x < 0 || x > grid.length - 1 || y < 0 || y > grid[0].length - 1 || grid[x][y] == '0') {
            return -1; // 走廊情况 返回负数做标记
        }
        if (grid[x][y] != curCh) {
            return 0;
        }
        // 标记访问过的位置
        grid[x][y] = '6';
        int[][] dirs = new int[][] {
                { 1, 0 },
                { -1, 0 },
                { 0, 1 },
                { 0, -1 }
        };
        int cnt = 1;
        // 错误大概是这里的全方位遍历有问题
        boolean flag = false;
        for (int i = 0; i < 4; i++) {
            int ii = x + dirs[i][0];
            int jj = y + dirs[i][1];
            int tmp = dfs(grid, ii, jj, curCh);
            if (tmp == -1) { // 出现相邻到走廊 提前返回
                flag = true;
            }
            cnt += tmp;
        }
        if (flag) {
            return -1;
        }
        return cnt;
    }
    ////
}
// @lc code=end

class test38 {
    public static void main(String[] args) {
        Solution38 sl = new Solution38();
        String[] grid = new String[] {
                "03220345210201351353255151342522150354245225540435231445421322442100024343051012142144514521334",
                "44355024402153254115024323035325344334412354333521132214242153124231421423121235412553252122114",
                "54142433244453521223510241054524113132123550521102453115015555015155423221520244220215042255351",
                "43224302424125435210205002542132341232101202205004220242341204424514432211344303550511434324153",
                "25311023532531441131032255523223533324551142421344143022325335411244010152444453453305154154523",
                "24135520321324324515224213443201545053544343315124444204035332554511450340223330242241323142433",
                "45413455115455555222322224124455524432245500021352510253253025454235124224125222433334451430235",
                "11105442243114441033124125345334312111211251453422330011445112550001354133133444011014045012555",
                "35143214205443002345325205154353413411544315555041510432020253224141140442234434501251514553213",
                "25520215151023353152331432154135253124221152412455014422530333304335421415241233153341331313454",
                "11224342432312115454240525245143234124314154340114233145224352524355051434330451310111414201225",
                "32333413030124155452021510530454054354354151140343331154323455434115511052322334151420233155100",
                "51151401250531442154121454244511024351405103350035211415113115334523435504231005150241153451325",
                "53033311051314125345422534045422542343544231142325525321121343424533354012453553531054333413531",
                "13022320250110031412354435331420330503520541331123532354113022235352235254234355133552553033143",
                "50434123222120133135312532344143430455355153251434451255131453433534232521515001403251312513012",
                "42035221414551111322542123542054404013022324342440412353555505352333312424243505451542122321505",
                "00254215300253412311330013055432512115250022312332412424142121245344113531103114144045325041240",
                "23330334215024211545332311411121145312112114101514352230543213503553213150332040445045300152355",
                "11112335451434444351512525013121032423131414102255255352433454415535410435234212253234235530403",
                "43300551013341254151132535445114532534124015214314532543331540140315215304104310152525451552311",
                "42151324354415003443341512012454224204512445513224244213342425011004332151251435442333314154140",
                "23123053343211523045315242341531330205213430235112312053422221514125521145202554334223511223414",
                "31455521210431412344114323435232513151554443124244305230411114331312435305313043311004212253354",
                "25410422544455323035455232153542234232522544502451401431252105214033144543412314553231312254253",
                "43235231511213033425213223230024253412335423344211144423343110452301330520210110433114323232533",
                "12052212035051551130315514354233521235443143524533515345424052454211230210323022413351442311315",
                "14224322345400115532333315300313153025323452555204415254435154144302535242123252220510305152243",
                "54441144321010525321513233425153410544510323541145323535140233223114003315504124324141212523245",
                "43221021331525111321301515315004425432313123113004234333405445534313404102434404042021025231423",
                "13225415132113320413005303555242234350514100503323113511221131431304013255132113043224422215113",
                "33512352534115330011322554513303135453342430322052410114302225112453314531235543133212413553413",
                "15525124223030035121414250411133543101133331234143133514523123430443415543531411433104440132543",
                "31545240324033242524211114253532125345421030122514145025512124322242201321523333230312125534442",
                "20113443111204324411155124431333522423213424210314055332255152144433152401132413233514215542220",
                "24454550454503135055225324245533120112423344023455211434353154131125044143121143423320131535134",
                "15042033543525420555202323125513322115512215324044443225344012134411321425122131243244012342324",
                "25440543021412343521302311553305341212114435324401151322432510213135555433143313053225425423051",
                "40124442335340531552131123142202331251440142134412523425215021335154433212225454254330214452312",
                "52405131352550411321111111511354134231152322532123522251424513333254354250121120144142530153522",
                "33015131143241232443144150225433140402335424324511354131122550131000044133430551334253444324200",
                "15110304243233133352434444243501222313312121445452324142300420503442043133145424541353432144341",
                "50111254531011212201032325041323244213242120255155335321435025125112545313552423355215353254212",
                "34315212454341550242422012342542333511313251205201245104132511240233431130323033534513341152432",
                "35022330521442452122210214355551113215414331403411312432024232020510102032251113222225533131254",
                "25501321045143135030442110531124253545131413104233552331232100341455024512520453504555210234015",
                "12334513404423531320251103325511433123543413433432425352015434252105132345101415221531254331403",
                "42511012423322524023500010400541012521222521523511253201335332340330353540244243543552451303141",
                "05223313231444322215415422435312512143131154520451524224253143455444133411455112115441445111521",
                "02241514413235520022111053253220235352241414354421354445453244341212131215201452031502304042322",
                "23244454132312542521235531333500424552020414154152551532244151042212355311422523201353221241344",
                "41301143425034322451443133105232210112553211343015512124555231520211105035523513522140421455314",
                "31510221442111431550410312155351233053204414122444130235523515141410151301421420321232331531454",
                "31444421235252143154402521015143422552255311111300543230434241041202333221311322555435350221143",
                "20555445045204331131345513450553533433052341242535145122313520254542025052312304214445122414111",
                "20122444540432424532251525013511125154143210532423442322135241341151235312131132512543252125454",
                "51214443321115314531222123211143242204135542222332521224154241014153454335114343505224230414541",
                "32152353112403222541531220244224152151414101554402221411443201104121420353443235555104132223213",
                "15111425525102315412433142142105154525422244501231513235022430502202142110152243512441114134121",
                "34550434431034022132251103445445524245354252321221334352215034453355433421111213223442541152022",
                "25411515155025323454221241115012522332533441423433110351345155253323052422451453321143152050121",
                "43523243223301254304334243354054241511251352550551523203512144432214232142320413431515151254253",
                "12311522232231221323441353040524413043405401153222314452245425101213410224254323343433235043033",
                "45521214553221501332241552111523322552543414114412313204455550331434121053134350135155524322203",
                "33254155323411020304153054152111352522345341545004202040440244023123522443402342033231332311124",
                "54523425201355043435224135452505424511245434330453055242121215235135335244245433123511202441405",
                "35211134533213204315325540303134311453111135340042520123054110054443251354354224152322424251345",
                "51241113351215501532254014415114433243523414243254253410032243012155340434513424351334053341141",
                "11425531214214154245302143355333211301054140452120100425453310445025205541412254433553212522535",
                "23052442211411022035103213553230540251144433141513444450131223422410311251232144515205315304125",
                "51225322345150312252210422532111132453144112332543144251141324420003110231233135152252153014455",
                "25412230550432242541250432043315223411231433222553234411244221041054110413553552314253031223101",
                "25054525401515153524545522214511255113041510242415445554512345201431133352545102214253122202454",
                "24325324532013444323420122430522225115152222434220331301034231052541241332535151143320251425512",
                "40153142241510134124223004121415055313514414244551031115132320142352151444203533431302442335143",
                "33033552402101514425024314203103535541122544534411333132351004553054111423303131553333111430214",
                "32232331553311352442222124142345501414415314250441524114301312314322215232044212225015141151534",
                "23425135211241153333434534533105255345444434313542031513204221312545133525530251501543441014352",
                "24422155234355500210352443124332121354144014115351331402003123242254022253125553314423313403145",
                "41354344453323422442054343140535333355241425222455542342544352422431214234313135123542113400255",
                "14443144215452112514141054143312221224553301103341220444104544534435552141530505301011232522143",
                "53331333321353445414101323320220534334515244243234134125425452115542353242021434314121505311502",
                "34021351533201221553442435025444455453515532421513431334345534001555531022502402250544234141030",
                "40102453151204115534121322223545344512311032321141233223214242542143352503154325241400421520501",
                "41332311322051222045323424354330253504335125254113332353440345155532124154334052134415455304324",
                "33555343532224220141154131333511233535224413352124111344233411124054525453534454245351143111554",
                "42535053104050433014455355045341243354124330112342254413211451123525115512253451052345535545321",
                "14132512325141333432542021322131331155343532523244402123121222223302122453250534242512553222453",
                "02115014221242431340315101115024453322542535524333334111111143141115443334123003312345112141131",
                "12144102544312455224400354455110313031340452014215034320402411210445452442235423112254555403053",
                "33525352350401434514314141304330022515312143513413251410144423433145033022341001242253453355240",
                "45312253423210122324554025124124534035215454315350223155534155445343425301343255344424231141025"
        };
        System.out.println(sl.largestArea(grid));
    }
}